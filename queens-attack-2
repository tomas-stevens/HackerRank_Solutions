using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'queensAttack' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters;
     *  1. INTEGER n = rows and columns count
     *  2. INTEGER k = num of obsticals
     *  3. INTEGER r_q = queens row placement cords
     *  4. INTEGER c_q = queens col placement cords
     *  5. 2D_INTEGER_ARRAY obstacles
     */

    public static int queensAttack(int n, int k, int r_q, int c_q, List<List<int>> obstacles)
    {
        var Result = 0;            
            
        Dictionary<string, List<int>> dict = new();    
        
        foreach(var blockage in obstacles){
            dict[blockage[0]+"_"+blockage[1]] = blockage;
         //   Console.WriteLine(blockage[0] +" " + blockage[1]);            
        }
        
        void queen_move_dir(int x, int y){ //loops the queens movements to see if they collide with blockage.
           int row_move = r_q + x; 
           int col_move = c_q + y;
           
           while(row_move > 0 && col_move > 0 && row_move < n+1 && col_move < n+1){ // Non out of bounds cords
               string KEY = row_move + "_" + col_move;
               if(dict.ContainsKey(KEY)){ //if queen hits obstical quit out not a possible movement spot.
                   break;
               }
               else{
                   row_move += x;
                   col_move += y;
                   Result++;                   
               }
               
               
           } 
            
        }    
        queen_move_dir(1,0); //n
        queen_move_dir(-1,0); //s
        queen_move_dir(0,1); //e
        queen_move_dir(0,-1); //w
        queen_move_dir(1,1); //ne
        queen_move_dir(-1,1); //se
        queen_move_dir(1,-1); //nw
        queen_move_dir(-1,-1); //sw       
            
        return Result; 
            
            
    }

}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string[] firstMultipleInput = Console.ReadLine().TrimEnd().Split(' ');

        int n = Convert.ToInt32(firstMultipleInput[0]);

        int k = Convert.ToInt32(firstMultipleInput[1]);

        string[] secondMultipleInput = Console.ReadLine().TrimEnd().Split(' ');

        int r_q = Convert.ToInt32(secondMultipleInput[0]);

        int c_q = Convert.ToInt32(secondMultipleInput[1]);

        List<List<int>> obstacles = new List<List<int>>();

        for (int i = 0; i < k; i++)
        {
            obstacles.Add(Console.ReadLine().TrimEnd().Split(' ').ToList().Select(obstaclesTemp => Convert.ToInt32(obstaclesTemp)).ToList());
        }

        int result = Result.queensAttack(n, k, r_q, c_q, obstacles);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
